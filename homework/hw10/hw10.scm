(define (accumulate combiner start n term)
  (cond ((= n 0) start)
  (else (combiner (term n) (accumulate combiner start (- n 1) term))))
)

(define (accumulate-tail combiner start n term)
  (define (accumulator combiner i n term)
    (cond ((= n 0) i)
    (else (accumulator combiner (combiner i (term n)) (- n 1) term))))
  (accumulator combiner start n term)
)

(define (partial-sums stream)
  (define (helper i stream)
    (cond ((null? stream) stream)
    (else (cons-stream (+ i (car stream))
                (helper (+ i (car stream))
                (cdr-stream stream))))))
  (helper 0 stream)
)

(define (rle s)
  (define (rler s i n)
    (cond ((null? s) (cons-stream (list i n) nil))
          ((not (= (car s) i)) (cons-stream (list i n) (rler (cdr-stream s) (car s) 1)))
          (else (rler (cdr-stream s) i (+ 1 n)))
))
  (if (null? s) nil
      (rler (cdr-stream s) (car s) 1))
  )
